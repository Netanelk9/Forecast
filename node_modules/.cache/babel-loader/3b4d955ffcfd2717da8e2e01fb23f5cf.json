{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\studies\\\\myapp\\\\src\\\\components\\\\Thegame.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Title from './Title';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Thegame(props) {\n  _s();\n\n  // add the next hooks - player and computer: deck, cardIndex, score\n  const [playerDeck, setPlayerDeck] = useState([]);\n  const [compDeck, setCompDeck] = useState([]); // fucntions - createDecks, nextCard, checkRoundWin, gameWinner\n\n  const createDecks = () => {\n    // loop generate 52 cards in array\n    let cardArr = [];\n\n    for (let card = 1; card <= 13; card++) {\n      for (let i = 0; i < 4; i++) {\n        cardArr.push(card);\n      }\n    }\n\n    console.log(cardArr); // for(let i=1, j=1, card=1; i<=52; i++, j++) {\n    //   cardArr.push(card)\n    //   if(j == 4) {\n    //     j = 0\n    //     card++\n    //   }\n    // }\n\n    let pCards = [];\n    let cCards = [];\n    let rnd;\n\n    while (cardArr.length > 0) {\n      rnd = Math.floor(Math.random() * cardArr.length);\n      pCards.push(cardArr[rnd]);\n      cardArr.splice(rnd, 1);\n      rnd = Math.floor(Math.random() * cardArr.length);\n      cCards.push(cardArr[rnd]);\n      cardArr.splice(rnd, 1);\n    }\n\n    setPlayerDeck(pCards);\n    setCompDeck(cCards);\n    console.log(pCards);\n    console.log(cCards); // מטרת הפוקציה היא לחלק 26 קלפים רנדומליים לכל שחקן\n    // שתי מערכים של 26 מספרים רנדומלים, אחד לכל שחקן\n    // ממה נתחיל?\n    // אני אצור מערך ריק\n    // לתוך מערך זה אני אכניס מספרים מ1עד 13 בכפולות של 4\n    // לאחר מכן אני אוציא את המספרים באופן אקראי \n    // ואחלק בין שתי מערכים נוספים\n    // 2 מערכים שלהם אוכל לחלק א 26 הקלפים\n    // \n    // split to two decks array randomly (split, random, push)\n    // set on hooks\n  }; // hit\n  // hit button the to move the index by one - hook for the current index\n  // display the cards\n  // calc score - who has greather card nuimber and update a hook with his score\n  // use the paint to add all relevant elemets\n  // use {hooks} and prorps as needed \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      text: \"WAR!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Comp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: compDeck[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createDecks,\n      children: \"Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Thegame, \"69akwOLbI1rQU44nUzXpi/oC8KA=\");\n\n_c = Thegame;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thegame\");","map":{"version":3,"names":["React","useState","Title","Thegame","props","playerDeck","setPlayerDeck","compDeck","setCompDeck","createDecks","cardArr","card","i","push","console","log","pCards","cCards","rnd","length","Math","floor","random","splice"],"sources":["C:/Users/ADMIN/Desktop/studies/myapp/src/components/Thegame.jsx"],"sourcesContent":["import React, {useState} from 'react'\r\nimport Title from './Title'\r\n\r\nexport default function Thegame(props) {\r\n\r\n  // add the next hooks - player and computer: deck, cardIndex, score\r\n  const [playerDeck, setPlayerDeck] = useState([])\r\n  const [compDeck, setCompDeck] = useState([])\r\n \r\n  // fucntions - createDecks, nextCard, checkRoundWin, gameWinner\r\n  const createDecks = () => {\r\n    // loop generate 52 cards in array\r\n    let cardArr = [];\r\n    for(let card=1; card<=13; card++) {\r\n      for(let i=0; i<4; i++) {\r\n        cardArr.push(card)\r\n      }\r\n    }\r\n    console.log(cardArr);\r\n    // for(let i=1, j=1, card=1; i<=52; i++, j++) {\r\n      //   cardArr.push(card)\r\n      //   if(j == 4) {\r\n        //     j = 0\r\n        //     card++\r\n        //   }\r\n        // }\r\n        \r\n        let pCards = []\r\n        let cCards = []\r\n        let rnd;\r\n        while(cardArr.length > 0) {\r\n          rnd = Math.floor(Math.random() * cardArr.length)\r\n          pCards.push(cardArr[rnd])\r\n          cardArr.splice(rnd, 1)\r\n          \r\n          rnd = Math.floor(Math.random() * cardArr.length)\r\n          cCards.push(cardArr[rnd])\r\n          cardArr.splice(rnd, 1) \r\n        }\r\n        \r\n        setPlayerDeck(pCards)\r\n        setCompDeck(cCards)\r\n        console.log(pCards);\r\n        console.log(cCards);\r\n        // מטרת הפוקציה היא לחלק 26 קלפים רנדומליים לכל שחקן\r\n    // שתי מערכים של 26 מספרים רנדומלים, אחד לכל שחקן\r\n\r\n    // ממה נתחיל?\r\n    // אני אצור מערך ריק\r\n    // לתוך מערך זה אני אכניס מספרים מ1עד 13 בכפולות של 4\r\n    // לאחר מכן אני אוציא את המספרים באופן אקראי \r\n    // ואחלק בין שתי מערכים נוספים\r\n    // 2 מערכים שלהם אוכל לחלק א 26 הקלפים\r\n    // \r\n    // split to two decks array randomly (split, random, push)\r\n\r\n    // set on hooks\r\n  }\r\n\r\n\r\n  // hit\r\n  // hit button the to move the index by one - hook for the current index\r\n  // display the cards\r\n  \r\n  // calc score - who has greather card nuimber and update a hook with his score\r\n\r\n  // use the paint to add all relevant elemets\r\n  // use {hooks} and prorps as needed \r\n  return (\r\n    <div>\r\n      <Title text={\"WAR!\"} />\r\n      <div>Comp</div>\r\n      <div>{compDeck[1]}</div>\r\n\r\n      <button onClick={createDecks}>Deck</button>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;EAAA;;EAErC;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC,CAJqC,CAMrC;;EACA,MAAMQ,WAAW,GAAG,MAAM;IACxB;IACA,IAAIC,OAAO,GAAG,EAAd;;IACA,KAAI,IAAIC,IAAI,GAAC,CAAb,EAAgBA,IAAI,IAAE,EAAtB,EAA0BA,IAAI,EAA9B,EAAkC;MAChC,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkBA,CAAC,EAAnB,EAAuB;QACrBF,OAAO,CAACG,IAAR,CAAaF,IAAb;MACD;IACF;;IACDG,OAAO,CAACC,GAAR,CAAYL,OAAZ,EARwB,CASxB;IACE;IACA;IACE;IACA;IACA;IACA;;IAEA,IAAIM,MAAM,GAAG,EAAb;IACA,IAAIC,MAAM,GAAG,EAAb;IACA,IAAIC,GAAJ;;IACA,OAAMR,OAAO,CAACS,MAAR,GAAiB,CAAvB,EAA0B;MACxBD,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBZ,OAAO,CAACS,MAAnC,CAAN;MACAH,MAAM,CAACH,IAAP,CAAYH,OAAO,CAACQ,GAAD,CAAnB;MACAR,OAAO,CAACa,MAAR,CAAeL,GAAf,EAAoB,CAApB;MAEAA,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBZ,OAAO,CAACS,MAAnC,CAAN;MACAF,MAAM,CAACJ,IAAP,CAAYH,OAAO,CAACQ,GAAD,CAAnB;MACAR,OAAO,CAACa,MAAR,CAAeL,GAAf,EAAoB,CAApB;IACD;;IAEDZ,aAAa,CAACU,MAAD,CAAb;IACAR,WAAW,CAACS,MAAD,CAAX;IACAH,OAAO,CAACC,GAAR,CAAYC,MAAZ;IACAF,OAAO,CAACC,GAAR,CAAYE,MAAZ,EAjCoB,CAkCpB;IACJ;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;EACD,CA/CD,CAPqC,CAyDrC;EACA;EACA;EAEA;EAEA;EACA;;;EACA,oBACE;IAAA,wBACE,QAAC,KAAD;MAAO,IAAI,EAAE;IAAb;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA,UAAMV,QAAQ,CAAC,CAAD;IAAd;MAAA;MAAA;MAAA;IAAA,QAHF,eAKE;MAAQ,OAAO,EAAEE,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GA1EuBN,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}