{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\studies\\\\myapp\\\\src\\\\components\\\\Gamepage.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamePage(props) {\n  _s();\n\n  const [playerDeck, setPlayerDeck] = useState([]);\n  const [compDeck, setCompDeck] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [splitDeck, setSplitDeck] = useState(false);\n  const [cannotHitCard, setCannotHitCard] = useState(true);\n\n  const createDeck = () => {\n    // create 52 cards from 1-13\n    let cards = [];\n    let card = 1;\n\n    for (let i = 1; i <= 52; i++) {\n      cards.push(card);\n\n      if (i % 4 == 0) {\n        card++;\n      }\n    }\n\n    let pDeck = [];\n    let cDeck = [];\n    let rnd;\n\n    while (cards.length > 0) {\n      // card for palyer\n      rnd = getRnd(cards.length);\n      pDeck.push(cards[rnd]);\n      cards.splice(rnd, 1); // card for computer\n\n      rnd = getRnd(cards.length);\n      cDeck.push(cards[rnd]);\n      cards.splice(rnd, 1);\n    }\n\n    setPlayerDeck(pDeck);\n    setCompDeck(cDeck);\n    setSplitDeck(true);\n    setCannotHitCard(false);\n  };\n\n  const hitCard = () => {\n    setCurrentCardIndex(currentCardIndex + 1);\n  };\n\n  function getRnd(max) {\n    return Math.floor(Math.random() * max);\n  } // check round winner\n  // check game winner - when has 26 cards\n  // pass the winner to app\n  // cahnge page to end page\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      text: \"WAR!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: compDeck[currentCardIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: playerDeck[currentCardIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.playerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: splitDeck,\n      onClick: createDeck,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: cannotHitCard,\n      onClick: hitCard,\n      children: \"hit!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"gl/BWmkFE7K7It3P+W5XWjb+F5w=\");\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","GamePage","props","playerDeck","setPlayerDeck","useState","compDeck","setCompDeck","currentCardIndex","setCurrentCardIndex","splitDeck","setSplitDeck","cannotHitCard","setCannotHitCard","createDeck","cards","card","i","push","pDeck","cDeck","rnd","length","getRnd","splice","hitCard","max","Math","floor","random","playerName"],"sources":["C:/Users/ADMIN/Desktop/studies/myapp/src/components/Gamepage.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function GamePage(props) {\r\n\r\n  const [playerDeck, setPlayerDeck] = useState([])\r\n  const [compDeck, setCompDeck] = useState([])\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(0)\r\n  \r\n  const [splitDeck, setSplitDeck] = useState(false)\r\n  const [cannotHitCard, setCannotHitCard] = useState(true)\r\n\r\n  const createDeck = () => {\r\n    // create 52 cards from 1-13\r\n    let cards = []\r\n    let card = 1;\r\n    for(let i=1; i<=52; i++) {\r\n      cards.push(card)\r\n      if(i%4 == 0) {\r\n        card++\r\n      }\r\n    }\r\n\r\n    let pDeck = []\r\n    let cDeck = []\r\n    let rnd;\r\n    while(cards.length > 0) {\r\n      // card for palyer\r\n      rnd = getRnd(cards.length)\r\n      pDeck.push(cards[rnd])\r\n      cards.splice(rnd, 1)\r\n\r\n      // card for computer\r\n      rnd = getRnd(cards.length)\r\n      cDeck.push(cards[rnd])\r\n      cards.splice(rnd, 1)\r\n    }\r\n    setPlayerDeck(pDeck)\r\n    setCompDeck(cDeck)\r\n    setSplitDeck(true)\r\n    setCannotHitCard(false)\r\n  }\r\n\r\n  const hitCard = () => {\r\n    setCurrentCardIndex(currentCardIndex+1)\r\n  }\r\n\r\n  function getRnd(max) {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n    // check round winner\r\n    // check game winner - when has 26 cards\r\n    // pass the winner to app\r\n    // cahnge page to end page\r\n\r\n  return (\r\n    <div>\r\n      <Title text={\"WAR!\"} />\r\n      <h2>Comp</h2>\r\n      <div>{compDeck[currentCardIndex]}</div>\r\n      <div>{playerDeck[currentCardIndex]}</div>\r\n      <h2>{props.playerName}</h2>\r\n      <button disabled={splitDeck} onClick={createDeck}>Start</button>\r\n      <button disabled={cannotHitCard} onClick={hitCard}>hit!</button>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EAEtC,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACG,gBAAD,EAAmBC,mBAAnB,IAA0CJ,QAAQ,CAAC,CAAD,CAAxD;EAEA,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;;EAEA,MAAMS,UAAU,GAAG,MAAM;IACvB;IACA,IAAIC,KAAK,GAAG,EAAZ;IACA,IAAIC,IAAI,GAAG,CAAX;;IACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,IAAE,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;MACvBF,KAAK,CAACG,IAAN,CAAWF,IAAX;;MACA,IAAGC,CAAC,GAAC,CAAF,IAAO,CAAV,EAAa;QACXD,IAAI;MACL;IACF;;IAED,IAAIG,KAAK,GAAG,EAAZ;IACA,IAAIC,KAAK,GAAG,EAAZ;IACA,IAAIC,GAAJ;;IACA,OAAMN,KAAK,CAACO,MAAN,GAAe,CAArB,EAAwB;MACtB;MACAD,GAAG,GAAGE,MAAM,CAACR,KAAK,CAACO,MAAP,CAAZ;MACAH,KAAK,CAACD,IAAN,CAAWH,KAAK,CAACM,GAAD,CAAhB;MACAN,KAAK,CAACS,MAAN,CAAaH,GAAb,EAAkB,CAAlB,EAJsB,CAMtB;;MACAA,GAAG,GAAGE,MAAM,CAACR,KAAK,CAACO,MAAP,CAAZ;MACAF,KAAK,CAACF,IAAN,CAAWH,KAAK,CAACM,GAAD,CAAhB;MACAN,KAAK,CAACS,MAAN,CAAaH,GAAb,EAAkB,CAAlB;IACD;;IACDjB,aAAa,CAACe,KAAD,CAAb;IACAZ,WAAW,CAACa,KAAD,CAAX;IACAT,YAAY,CAAC,IAAD,CAAZ;IACAE,gBAAgB,CAAC,KAAD,CAAhB;EACD,CA7BD;;EA+BA,MAAMY,OAAO,GAAG,MAAM;IACpBhB,mBAAmB,CAACD,gBAAgB,GAAC,CAAlB,CAAnB;EACD,CAFD;;EAIA,SAASe,MAAT,CAAgBG,GAAhB,EAAqB;IACnB,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAP;EACD,CA9CqC,CAgDpC;EACA;EACA;EACA;;;EAEF,oBACE;IAAA,wBACE,QAAC,KAAD;MAAO,IAAI,EAAE;IAAb;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA,UAAMpB,QAAQ,CAACE,gBAAD;IAAd;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAA,UAAML,UAAU,CAACK,gBAAD;IAAhB;MAAA;MAAA;MAAA;IAAA,QAJF,eAKE;MAAA,UAAKN,KAAK,CAAC4B;IAAX;MAAA;MAAA;MAAA;IAAA,QALF,eAME;MAAQ,QAAQ,EAAEpB,SAAlB;MAA6B,OAAO,EAAEI,UAAtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANF,eAOE;MAAQ,QAAQ,EAAEF,aAAlB;MAAiC,OAAO,EAAEa,OAA1C;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;GAhEuBxB,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}